package com.zhang.box.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AD_BEAN".
*/
public class AdBeanDao extends AbstractDao<AdBean, Long> {

    public static final String TABLENAME = "AD_BEAN";

    /**
     * Properties of entity AdBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdType = new Property(1, Integer.class, "adType", false, "AD_TYPE");
        public final static Property AdVideoFile = new Property(2, String.class, "adVideoFile", false, "AD_VIDEO_FILE");
        public final static Property AdImgFile = new Property(3, String.class, "adImgFile", false, "AD_IMG_FILE");
        public final static Property AdUrl = new Property(4, String.class, "adUrl", false, "AD_URL");
    }


    public AdBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AdBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AD_TYPE\" INTEGER," + // 1: adType
                "\"AD_VIDEO_FILE\" TEXT," + // 2: adVideoFile
                "\"AD_IMG_FILE\" TEXT," + // 3: adImgFile
                "\"AD_URL\" TEXT);"); // 4: adUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer adType = entity.getAdType();
        if (adType != null) {
            stmt.bindLong(2, adType);
        }
 
        String adVideoFile = entity.getAdVideoFile();
        if (adVideoFile != null) {
            stmt.bindString(3, adVideoFile);
        }
 
        String adImgFile = entity.getAdImgFile();
        if (adImgFile != null) {
            stmt.bindString(4, adImgFile);
        }
 
        String adUrl = entity.getAdUrl();
        if (adUrl != null) {
            stmt.bindString(5, adUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer adType = entity.getAdType();
        if (adType != null) {
            stmt.bindLong(2, adType);
        }
 
        String adVideoFile = entity.getAdVideoFile();
        if (adVideoFile != null) {
            stmt.bindString(3, adVideoFile);
        }
 
        String adImgFile = entity.getAdImgFile();
        if (adImgFile != null) {
            stmt.bindString(4, adImgFile);
        }
 
        String adUrl = entity.getAdUrl();
        if (adUrl != null) {
            stmt.bindString(5, adUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdBean readEntity(Cursor cursor, int offset) {
        AdBean entity = new AdBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // adType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // adVideoFile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adImgFile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // adUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAdVideoFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdImgFile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
