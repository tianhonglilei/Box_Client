package box.lilei.box_client.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROAD_BEAN".
*/
public class RoadBeanDao extends AbstractDao<RoadBean, Long> {

    public static final String TABLENAME = "ROAD_BEAN";

    /**
     * Properties of entity RoadBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hid = new Property(1, Long.class, "hid", false, "HID");
        public final static Property Pid = new Property(2, Long.class, "pid", false, "PID");
        public final static Property Main = new Property(3, int.class, "main", false, "MAIN");
        public final static Property Max = new Property(4, int.class, "max", false, "MAX");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
        public final static Property Weixin = new Property(6, int.class, "weixin", false, "WEIXIN");
        public final static Property Zhifubao = new Property(7, int.class, "zhifubao", false, "ZHIFUBAO");
        public final static Property Huogui_num = new Property(8, String.class, "huogui_num", false, "HUOGUI_NUM");
        public final static Property NowNum = new Property(9, int.class, "nowNum", false, "NOW_NUM");
        public final static Property TempState = new Property(10, int.class, "tempState", false, "TEMP_STATE");
        public final static Property SaleState = new Property(11, int.class, "saleState", false, "SALE_STATE");
    }

    private DaoSession daoSession;


    public RoadBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RoadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROAD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HID\" INTEGER," + // 1: hid
                "\"PID\" INTEGER," + // 2: pid
                "\"MAIN\" INTEGER NOT NULL ," + // 3: main
                "\"MAX\" INTEGER NOT NULL ," + // 4: max
                "\"PRICE\" INTEGER NOT NULL ," + // 5: price
                "\"WEIXIN\" INTEGER NOT NULL ," + // 6: weixin
                "\"ZHIFUBAO\" INTEGER NOT NULL ," + // 7: zhifubao
                "\"HUOGUI_NUM\" TEXT," + // 8: huogui_num
                "\"NOW_NUM\" INTEGER NOT NULL ," + // 9: nowNum
                "\"TEMP_STATE\" INTEGER NOT NULL ," + // 10: tempState
                "\"SALE_STATE\" INTEGER NOT NULL );"); // 11: saleState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROAD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoadBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long hid = entity.getHid();
        if (hid != null) {
            stmt.bindLong(2, hid);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(3, pid);
        }
        stmt.bindLong(4, entity.getMain());
        stmt.bindLong(5, entity.getMax());
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getWeixin());
        stmt.bindLong(8, entity.getZhifubao());
 
        String huogui_num = entity.getHuogui_num();
        if (huogui_num != null) {
            stmt.bindString(9, huogui_num);
        }
        stmt.bindLong(10, entity.getNowNum());
        stmt.bindLong(11, entity.getTempState());
        stmt.bindLong(12, entity.getSaleState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoadBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long hid = entity.getHid();
        if (hid != null) {
            stmt.bindLong(2, hid);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(3, pid);
        }
        stmt.bindLong(4, entity.getMain());
        stmt.bindLong(5, entity.getMax());
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getWeixin());
        stmt.bindLong(8, entity.getZhifubao());
 
        String huogui_num = entity.getHuogui_num();
        if (huogui_num != null) {
            stmt.bindString(9, huogui_num);
        }
        stmt.bindLong(10, entity.getNowNum());
        stmt.bindLong(11, entity.getTempState());
        stmt.bindLong(12, entity.getSaleState());
    }

    @Override
    protected final void attachEntity(RoadBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RoadBean readEntity(Cursor cursor, int offset) {
        RoadBean entity = new RoadBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // hid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // pid
            cursor.getInt(offset + 3), // main
            cursor.getInt(offset + 4), // max
            cursor.getInt(offset + 5), // price
            cursor.getInt(offset + 6), // weixin
            cursor.getInt(offset + 7), // zhifubao
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // huogui_num
            cursor.getInt(offset + 9), // nowNum
            cursor.getInt(offset + 10), // tempState
            cursor.getInt(offset + 11) // saleState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoadBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMain(cursor.getInt(offset + 3));
        entity.setMax(cursor.getInt(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setWeixin(cursor.getInt(offset + 6));
        entity.setZhifubao(cursor.getInt(offset + 7));
        entity.setHuogui_num(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNowNum(cursor.getInt(offset + 9));
        entity.setTempState(cursor.getInt(offset + 10));
        entity.setSaleState(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RoadBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RoadBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoadBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGoodsBeanDao().getAllColumns());
            builder.append(" FROM ROAD_BEAN T");
            builder.append(" LEFT JOIN GOODS_BEAN T0 ON T.\"PID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RoadBean loadCurrentDeep(Cursor cursor, boolean lock) {
        RoadBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GoodsBean goodsBean = loadCurrentOther(daoSession.getGoodsBeanDao(), cursor, offset);
        entity.setGoodsBean(goodsBean);

        return entity;    
    }

    public RoadBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RoadBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RoadBean> list = new ArrayList<RoadBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RoadBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RoadBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
